// Author:  Jakub Precht

#ifndef CONTROLLER_H
#define CONTROLLER_H

#include "lilypond.h"
#include "recorder.h"
#include "settings.h"

#include <QObject>
#include <QTimer>
#include <QThread>

class Controller : public QObject
{
  Q_OBJECT
  Q_PROPERTY(bool follow READ follow WRITE setFollow NOTIFY followChanged)
  Q_PROPERTY(float level READ level WRITE setLevel NOTIFY levelChanged)
  Q_PROPERTY(int indicatorWidth READ indicatorWidth NOTIFY indicatorWidthChanged)
  Q_PROPERTY(int indicatorHeight READ indicatorHeight NOTIFY indicatorHeightChanged)
  Q_PROPERTY(int playedNotes READ playedNotes WRITE setPlayedNotes NOTIFY playedNotesChanged)
  Q_PROPERTY(int pagesNumber READ pagesNumber WRITE setPagesNumber NOTIFY pagesNumberChanged)
  Q_PROPERTY(double indicatorScale READ indicatorScale WRITE setIndicatorScale NOTIFY indicatorScaleChanged)
  Q_PROPERTY(int scoreLength READ scoreLength WRITE setScoreLength NOTIFY scoreLengthChanged)
  Q_PROPERTY(int currentPage READ currentPage NOTIFY currentPageChanged)

public:
  explicit Controller(bool verbose = false, QObject *parent = nullptr);
  ~Controller();

  bool createdSuccessfully() const;

  int notesPerPage() const;
  int pagesNumber() const;
  int scoreLength() const;
  int currentPage() const;

public slots:
  int indicatorX(int index);
  int indicatorY(int index);
  bool openScore();
  float level() const;
  void setLevel(float level);
  bool follow() const;
  void setFollow(bool follow);
  int indicatorWidth() const;
  int indicatorHeight() const;
  int playedNotes() const;
  void setPlayedNotes(int playedNotes);
  double indicatorScale() const;
  void setIndicatorScale(double indicatorScale);
  void setPagesNumber(int pagesNumber);
  void setScoreLength(int scoreLength);

signals:
  void updateScore();
  void startRecording();
  void stopRecording();
  void generateScore();
  void levelChanged();
  void followChanged();
  void indicatorWidthChanged();
  void indicatorHeightChanged();
  void indicatorScaleChanged();
  void playedNotesChanged();
  void notesPerPageChanged();
  void pagesNumberChanged();
  void scoreLengthChanged();
  void currentPageChanged();
  void cancelledFileOpening();

private:
  void calculateIndicatorYs();
  void updateCurrentPage();
  void resetPageAndPosition();

  // ----------

  bool _status = true;
  const Settings *_settings = nullptr;
  Lilypond *_lilypond = nullptr;
  Recorder *_recorder = nullptr;
  QThread _lilypondThread;
  QThread _recorderThread;

  int _playedNotes = 0;
  int _pagesNumber = 0;
  int _scoreLength = 0;
  int _currentPage = 0;
  bool _follow = 0;
  float _level = 0;
  double _indicatorScale = 1;

  QTimer _timer;
  QString _toOpenFilename;
  QVector<QVector<int>> _indicatorYs; // for each page generated by lilypond
};



#endif // CONTROLLER_H
