#ifndef CONTROLLER_H
#define CONTROLLER_H

#include <QObject>
#include <QTimer>
#include <QThread>
#include "lilypond.h"
#include "recorder.h"

class Controller : public QObject
{
  Q_OBJECT
  Q_PROPERTY(bool follow READ follow WRITE setFollow NOTIFY followChanged)
  Q_PROPERTY(float level READ level WRITE setLevel NOTIFY levelChanged)
  Q_PROPERTY(int indicatorWidth READ indicatorWidth WRITE setIndicatorWidth NOTIFY indicatorWidthChanged)
  Q_PROPERTY(int indicatorHeight READ indicatorHeight WRITE setIndicatorHeight NOTIFY indicatorHeightChanged)
  Q_PROPERTY(int playedNotes READ playedNotes WRITE setPlayedNotes NOTIFY playedNotesChanged)
  Q_PROPERTY(int notesPerPage READ notesPerPage NOTIFY notesPerPageChanged)
  Q_PROPERTY(int pagesNumber READ pagesNumber WRITE setPagesNumber NOTIFY pagesNumberChanged)
  Q_PROPERTY(double indicatorScale READ indicatorScale WRITE setIndicatorScale NOTIFY indicatorScaleChanged)

public:
  explicit Controller(QObject *parent = nullptr);
  ~Controller();

  int notesPerPage() const;

  int pagesNumber() const;

public slots:
  int indicatorX(int index);
  int indicatorY(int index);
  void openScore();

  float level() const;
  void setLevel(float level);
  bool follow() const;
  void setFollow(bool follow);
  int indicatorWidth() const;
  void setIndicatorWidth(int indicatorWidth);
  int indicatorHeight() const;
  void setIndicatorHeight(int indicatorHeight);
  int playedNotes() const;
  void setPlayedNotes(int playedNotes);
  double indicatorScale() const;
  void setIndicatorScale(double indicatorScale);

  void setPagesNumber(int pagesNumber);

signals:
  void updateScore();
  void startRecording();
  void stopRecording();
  void generateScore();
  void levelChanged();
  void followChanged();
  void indicatorWidthChanged();
  void indicatorHeightChanged();
  void playedNotesChanged(int playedNotes);
  void indicatorScaleChanged();
  void notesPerPageChanged(int notesPerPage);

  void pagesNumberChanged(int pagesNumber);

private:
  void initializeIndicatorSettings();
  void calculateIndicatorYs();

  // -----
  QVector<int> _indicatorXs;
  QVector<QVector<int>> _indicatorYs; // for each page generated by lilypond

  float _level = 0;
  bool _follow = 0;
  int _indicatorWidth = 0;
  int _indicatorHeight = 0;
  double _indicatorScale = 1;
  int _playedNotes = 0;
  int _staffIndent = 0;
  int _pagesNumber;

  const int _notesPerPage = 32;
  const int scoreGenerateInterval = 250; // in ms
  const QString _indicatorSettingsFileName = ":/other/indicator-settings";
  QString _scoreFileName = ":/other/score";
  const QString _scoreImagePath = "/tmp/score-follower/score";


  QTimer _timer;
  Lilypond *_lilypond = nullptr;
  Recorder *_recorder = nullptr;
  QThread _lilypondThread;
  QThread _recorderThread;
};



#endif // CONTROLLER_H
